-- vim: ft=lua:

function select(t, title, items)

  local cursor = 1
  local waiting = true
  local maxCursor = #items

  local render = function()
    utils.clearM(t)
    utils.printMCenter(t, title)
    utils.hrM(t)
    -- utils.printMCenter(term, cursor)

    for i, info in ipairs(items) do
      local marker = " "
      if cursor == i then
        marker = "X"
      end
      local line = "[" .. marker .. "] " .. info[2]
      utils.printM(t, line)
    end
  end

  while waiting do
    render()
    event, arg1 = os.pullEvent("key")
    if arg1 == keys.up then
      if cursor > 1 then
        cursor = cursor - 1
      end
    elseif arg1 == keys.down then
      if cursor < maxCursor then
        cursor = cursor + 1
      end
    elseif arg1 == keys.enter then
      waiting = false
      return(items[cursor][1])
    else
      -- utils.p({event, arg1})
      -- sleep(1)
    end
  end

end

function window()
  local info = {
    widgets = {},
  }
  info.render = function(t)
    utils.clearM(t)
    for i,control in ipairs(info.widgets) do
      control.render(t)
    end
  end
  info.update = function()
    for i,control in ipairs(info.widgets) do
      control.update()
    end
  end
  info.add = function(control)
    table.insert(info.widgets, control)
  end
  info.click = function(x, y)
    for i,control in ipairs(info.widgets) do
      if x >= control.position.x and y >= control.position.y then
        click_x = x - control.position.x + 1
        click_y = y - control.position.y + 1
        if click_x <= control.size.width and click_y <= control.size.height then
          control.click(click_x,click_y)
        end
      end
    end
  end
  info.handleMouse = function()
    kind, p1, p2, p3, p4, p5 = os.pullEvent("mouse_click")
    if kind == "mouse_click" then
      button = p1
      x = p2
      y = p3
      info.click(x,y)
    end
  end
  return info;
end

function labelBox(x, y, w, h, text, align)
  if align == nil then
    align = "left"
  end
  local info = {
    text = text,
    align = align,
    position = { x = x, y = y },
    size = { width = w, height = h },
  }
  info.update = function()
  end
  info.click = function(x,y)
  end
  info.render = function(t)
    local _text
    if type(info.text) == "string" then
      _text = info.text
    else
      _text = info.text()
    end

    t.setCursorPos(info.position.x, info.position.y)
    utils.printM(t, "+--+")
    t.setCursorPos(info.position.x, info.position.y+1)
    utils.printM(t, "|  |")
    t.setCursorPos(info.position.x, info.position.y+2)
    utils.printM(t, "+--+")

    local _label = label(info.position.x+1, info.position.y+1, info.size.width-2, info.size.height-2, _text, "left")
    _label.render(t)
  end
  return info;
end

function label(x, y, w, h, text, align, prefix)
  if align == nil then
    align = "left"
  end
  local info = {
    text = text,
    align = align,
    prefix = prefix,
    position = { x = x, y = y },
    size = { width = w, height = h },
  }
  info.update = function()
  end
  info.click = function(x,y)
  end
  info.render = function(t)
    local _text
    if type(info.text) == "string" then
      _text = info.text
    else
      _text = info.text()
    end
    if info.prefix then
      _text = info.prefix .. _text
    end
    t.setCursorPos(info.position.x, info.position.y)
    if info.align == "center" then
      utils.printMCenter(t, _text)
    else
      utils.printM(t, _text)
    end
  end
  return info;
end

function hr(y, character)
  local info = {
    character = y, character,
    position = { x = 1, y = y },
    size = { height = 1 },
  }

  info.update = function()
  end
  info.click = function(x,y)
  end
  info.render = function(t)
    if info.size.width == nil then
      sw,sh = t.getSize()
      info.size.width = sw -- initialize it on first render
    end
    t.setCursorPos(info.position.x, info.position.y)
    utils.hrM(t)
  end
  return info;
end

function button(x, y, w, h, label, onClick, onUpdate)
  local info = {
    position = { x = x, y = y },
    size = { width = w, height = h },
    label = label,
    active = false,
    onClick = onClick,
    onUpdate = onUpdate,
  }
  info.update = function()
    if info.onUpdate then
      info.onUpdate(info)
    end
  end
  info.click = function(x,y)
    info.onClick(info, x,y)
  end
  info.render = function(t)
    if info.active then
      t.setTextColor(colors.red)
    else
      t.setTextColor(colors.white)
    end
    t.setCursorPos(info.position.x, info.position.y)
    t.write(info.label)
    t.setTextColor(colors.white)
  end
  return info;
end
